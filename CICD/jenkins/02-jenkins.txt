webhook triggers:
====================
    ex: automating pielines,
        when developer pushes code to feature branch of git repo, then pipeline starts executing automatically and performs compilation, test, build(artifcats), security check

    configuration:
    ------------------
    install plugin -> generic webhook triggger(specific to pipeline) ,
    now go to pipeline job -> trigger -> generic webhook trigger check it and now add post content parameters
        variable - ref
        expresiion - $.ref (json)
        token & token credentials -> both are for authrization, token is visible which is not good
            token credential -> add -> jenkins -> secret text -> secret(devopsshack123) -> id(token-webhook)
        optional filter -> to specify the branch 
            expresiion - refs/heads/dev 
            text - $ref
    above configuration is from jenkins side now need to do from github side:
    ------------------------------------------------
    github repo -> settings -> webhook -> addwebhook
    copy URL & query parameter  from jenkins under Token section
        ex: http://<jenkins_url>:8080/generic-webhook-trigger/invoke?token=devopsshack123 
    add above genetared URl in github payload, and conetnt type -> application/json -> addwebhook
    to check status -> clilck on webhooks -> recent deliveries shows tick mark 

    in jenkins console o/p it shows "generic cause" 


    multi branch pipeline:
    =========================
    jobs -> multi branch pipeline -> branch source: git -> git repo details(https://github.com/jaiswaladi246/Boardgame.git) -> build configuration(mode: jenkinsfile) -> apply changes(before this check below steps, if pipeline has tools section) 

        first time this job start executing all branches automatically, now we can configure github hook for multibranch pipeline with below steps 

        for pipeline and multi branch pipeline jobs install plugins -> stage view, multi branch scan  webhook trigger 

        for tools, add plugin for java  -> eclipe termuin installer 
        after installing plugins configure inside tools section 
        to add jdk 
            tools -> JDk installtions -> Name: jdk17 -> selct install automatically -> adoptium.net -> select java version(jdk17)

            maven -> name:3.6 -> install automatically from apache -> select version(3.6.1) 
    
    NOw go to job -> configure -> scan multi branch pipeline triggers under build configurations , selct scan by web hook -> trigger token(multibranch123) -> click on ? symbol and copy URl and modify it 
        ex: http://<jenkins ip>:8080/multibranch-webhook-trigger/invoke?token=<value> (multibranch123)

    above is payload url for multibranch pipeline
    now go to github -> settings -> webhooks -> addwebhook -> add payload URl -> content type: application/json -> addwebhooks 

    now modify code in main branch , it will trigger multi branch pipeline job automatically but only main branch pipeline  -> shows started  by indexing

    similarly test othe branches 

    
upstream & downstream jobs:
==============================
we can maintain two individual jobs CI and CD jobs as upsteam and downstream, once if CI is completed then automatically CD will start executing 
here CD job is automatic depends on CI job as weel as it can be triggered manually

    configure:
    =========
    newjob -> CI(pipeline) -> discard old build(stragey: log rotation, 5) -> pipeline code:
    one more newjob -> CD(pipeline) -> discard old build(stragey: log rotation, 5) -> pipeline 
        now modify CI pipeline -> configure -> add post section after stages 
        ex: 

                pipeline {
                    agent any
                    
                    tools {
                        maven 'maven3.6'
                        jdk 'jdk17'
                    }

                    stages {

                         stage('git checkout') {
                            steps {
                            giy branch: 'dev', url: 'https://github.com/jaiswaladi246/Boardgame.git'
                            }
                        }
                        
                        stage('Compile') {
                            steps {
                                dir('path/to/folder') {  //ehere pom.xml exists
                                    sh 'mvn compile'
                                 }
                            }
                        }
                        stage('test') {
                            steps {
                                sh 'mvn test'
                            }
                        }
                        stage('Package') {
                            steps {
                            sh 'mvn package'
                            }
                        }
                        stage('Hello') {
                            steps {
                                echo 'Hello World'
                            }
                        }
                    }

                    post {
                        success {
                            build job: 'CD'
                        }

                        failure {
                            build job: 'CD2'
                        }
                    }
                }


trigger mail notification
==============================
    Jenkins doesn't send the email itself. Instead, it connects to an SMTP server (like Gmail, Outlook, or an internal mail server), which handles the actual delivery of the email. about status of jobs 

     prerequisites for gmail notification:
     ----------------
     -> port 465 should be opening
     -> APPpassword for gmail account
     -> smtp server name for gmail(smtp.gmail.com)
            SMTP stands for Simple Mail Transfer Protocol. An SMTP server is a service that sends emails from one server (like Jenkins) to the recipientâ€™s email inbox (like Gmail, Outlook, etc.).

     "App Password" is a special password that you generate from your email provider to allow Jenkins (or any external application) to access your email account securely, without using your main password.

     generating APPpassword:
     -----------------------
        copy below URLL in browser:
            https://myaccount.google.com/apppasswords

            enbale 2FA befor this cativity
                App name(jenkins) -> it will generate password , copy that and go to jenkins 
                jenkins -> manage jenkins -> system  -> extended emiual notofication(
                    SMTP server: smtp.gmail.com
                    SMTP port: 465
                    advanced -> credentails -> jenkins
                      usernamewithpassword:
                        username: gmail account
                        password: generated app password 
                        id: mail-cred
                    use ssl 

                )

                emiual notofication(
                    SMTP server: smtp.gmail.com
                    advanced: use smtp auth 
                        username: mail id
                        password: genered app password 
                    use ssl 
                    SMTP port: 465 
                    REply_to-Adress: jenkins@devopsshack.com 
                    test: test it by adding some other mail address and check
                            from is : mail we have used in generating apppassword 
                            reply-to: generally will get replies to this mail, instead of from sender mail 
                            to: mail added in test configure 

                )

    for pipeline generate script using chat gpt for mail notification and add  under post section after stages


==================================================
++++++++++++++++++++++++++++++++++++++++++++++++++
====================================================
1 - real time usage of multi branch pipeline"
        if all the branches of that repo wnats the same events to trigger, then we can use this else if different branches has different properties like on different events they need to trigger then individual jobs 

2 - jenkins pipeline common error:
    137 error -> out of memory for very big pipelines/jobs 
    403/401 -> credentails errors
    git realted:
    -------------
    128 -> not provided credentails of git 
    401 -> wrog cred of git 
3 - security
    for static analysis:
        git lekas -> scans code of git repo for APIs, secrets, tokens...
        trivy -> scans files for dependency vulnarabilities, kube yaml file configurations 
        sonarqube -> issues exists with in source code like bugs, duplicates, vulnarabilities 
        





    

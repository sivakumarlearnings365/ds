virtualization(monolithic)
--------------------------
    physical server -> host os -> hypervisor ->(vm-a, vm-b) 
    individual os with thier own libs and apps running
containerization(micro svcs)
-------------------------------
    physical server -> host os -> docker -> 
        same host os resources across all containers of docker with thier indivial libs, n/w, storage, ..


docker components:
===================

-> docker client(cli)     
-> docker daemon(its backend service , holding docker objevts like images, containers...)

to make app portable 
----------------------
    1- pkg1(src+depdn)
    2- (pkg1+env) --> dkr img 

    above portable app can be implemented with help of docker file which contains steps of docker images 


    dockerfile:
    ------------
    FROM
    ENV 
    COPY 
    WORKDIR   -> even folder not there it cretes that folder 
    EXPOSE  -> its not opening port just info about port on which app is running 
    CMD["java", "-jar", "app.jar"] --> when container starts this command executes, it has two formats          1-shell, 2-exec(recommended)

    cmnds:
    ------------
    $ docker build -t board:v1 .

    tagging:
        <user-name>/<app>:<version>  --> default version is latest
    $ docker tag board:v1  <user-name>/<app>:<version> 
    $ docker push <user-name>/<app>:<version> 


docker installtion:
====================
    after docker installation docker group will be created which has permissions to execute docker commands.
     $ docker
     $ usermod -aG docker ubuntu/$USER
     $ newgrp docker 

     $ docker images 

     ex:
     =====
     clone git repo: 
        $ git clone https://github.com/jaiswaladi246/Boardgame.git
        to build docker image we need jat file to build that need maven also, so install jdk & mvn for builkding jar file
        $ mvn package --> it generates target folder 

        sample docker fie:(Dockerfile)
        ------------------
            FROM openjdk:17-alpine
            EXPOSE 8080
            ENV APP_HOME /usr/src/app
            COPY targe/*.jar $APP_HOME/app.jar
            WORK_DIR $APP_HOME
            CMD ["java", "-jar", "app.jar"]

        $ doker build -t sivakumarlearnings/boardgame:v1 .
        $ docker images
        $ docker login -u sivakumarlearnings -p 
        $ docker push  sivakumarlearnings/boardgame:v1
        
        to run docker containers from images:
        ------------------------------------
        $ docker pull sivakumarlearnings/boardgame:v1  --> it will pull image from repo 
        $ docker run -d --name container1 -p 8081:8080 sivakumarlearnings/boardgame:v1  (if image not present it will pull and run, -d -> detached mode , 8081->host m/c port, 8080 -> container port)
        $ docker ps 

        to interact woth container:
        -----------------------
        $ docker exec -it <container_id> /bin/sh 
    ENV vs ARG:
    -------------
    by using both commands we can create dir but by using env we can use that variable during run time also  , for ARG command it will be used during build time only 

    COPY vs ADD:
    ---------------
    COPY -> just copies content from local
    ADD -> it will copuy from local and internet , and also it will unarchive the archived files and then copy to containers from internet 

==================================================
++++++++++++++++++++++++++++++++++++++++++++++++++
====================================================
1) how docker conatiners  isolated form h/w --> docker container has its own n/w and storage , though other pps running same host m/c they can not interact  with containers

2) RUN command inside containers -> mostly they run with root user only, so no need of using sudo for running commands inside containers 

3)windows containers on linux -> its not possible as containers shares host os(linux), but in windows m/c with the hekp docker desktop app we can create containers of windows as well as linux but only one type of containers at a time, not both linux & windows containers at a time . 

topics:
-----------
1 - vm vs cntrns
2 - docker archi 
3 - docker cmnds  











    